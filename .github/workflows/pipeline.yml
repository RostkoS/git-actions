name: CI/CD Pipeline
env:
  AZURE_WEBAPP_NAME: test-app
  PYTHON_VERSION: '3.8'              

on:
  push:
    branches:
      - main
      - dev

jobs:
  lint:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install black

      - name: Run Linter
        run: flake8 .

      - name: Auto-fix with black
        run: black .

  test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests with Coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-fail-under=50

      - name: Upload Test Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build the application
        run: |
          zip -r app/main.zip app/main.py 

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  
    steps:
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.4.6"  

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform configuration
        run: terraform apply -auto-approve

      - name: Deploy the Python application
        run: |
          zip -r app/main.zip app/main.py 
          aws lambda update-function-code --function-name my-python-lambda --zip-file fileb://app/main.zip
